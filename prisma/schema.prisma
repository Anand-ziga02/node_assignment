generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  comments  Comment[]
  projects  ProjectMember[]
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  project        Project?  @relation(fields: [projectId], references: [id])
  projectId      Int?
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  dueDate        DateTime?
  priority       String?
  estimatedTime  Int?
  status         String    @default("not_started")
  attachmentPath String?
  recurrence     String?   // daily, weekly, monthly

  // âœ… Self-relation
  dependsOnId    Int?
  dependsOn      Task?     @relation("TaskDependencies", fields: [dependsOnId], references: [id])
  dependentTasks Task[]    @relation("TaskDependencies") // inverse side

  assignedTo     User?     @relation(fields: [userId], references: [id])
  userId         Int?
  comments       Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tasks Task[]
}

model Project {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  tasks       Task[]
  members     ProjectMember[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProjectMember {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  role      String  // e.g., "owner", "collaborator"
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime @default(now())
}

